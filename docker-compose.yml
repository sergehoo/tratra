#/Users/ogahserge/Documents/tratra/docker-compose.yml
# docker-compose.yml (stack de l’app tratra — sans Traefik)
# Traefik tourne dans un autre compose et expose 80/443
# Assure-toi que le réseau externe "proxy" existe:  docker network ls | grep proxy || docker network create proxy

networks:
  web:          # réseau interne de l’app
    driver: bridge
  proxy:        # réseau partagé avec Traefik (externe)
    external: true

volumes:
  postgres_data:
  static_volume:
  media_volume:
  minio_data: { }

services:
  # --- Base de données Postgres + PostGIS ---
  tratradb:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [web]
    restart: unless-stopped
  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    # Les ports suivants sont facultatifs si Traefik route correctement.
    # Tu peux les enlever en prod pour n’exposer que via Traefik.
    # ports:
    #   - "9000:9000"
    #   - "9001:9001"
    networks:
      - web
      - proxy
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      # API S3 (HTTP)
      - traefik.http.routers.minio-api.rule=Host(`${MINIO_API_HOST}`)
      - traefik.http.routers.minio-api.entrypoints=websecure
      - traefik.http.routers.minio-api.tls.certresolver=lets
      - traefik.http.services.minio-api.loadbalancer.server.port=9000
      - traefik.http.routers.minio-api.middlewares=minio-compress@docker

      # Console d'admin
      - traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_HOST}`)
      - traefik.http.routers.minio-console.entrypoints=websecure
      - traefik.http.routers.minio-console.tls.certresolver=lets
      - traefik.http.services.minio-console.loadbalancer.server.port=9001
#      - traefik.http.routers.minio-console.middlewares=minio-compress@docker

      # Middlewares partagés
#      - traefik.http.middlewares.minio-compress.compress=true


  # --- Redis (broker Celery + cache + Channels) ---
  redis:
    image: redis:7
    command: ["redis-server","--save","","--appendonly","no"]
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [web]
    restart: unless-stopped

  # --- tratraweb Django/ASGI (Daphne) ---
  tratraweb:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    # Entrypoint qui fait: check DB/Redis, migrate, collectstatic… puis Daphne
    command: ["/app/docker/entrypoint.sh", "daphne", "-b", "0.0.0.0", "-p", "8000", "tratra.asgi:application"]
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://127.0.0.1:8000/healthz || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 20
    # Labels Traefik: route HTTPS -> service tratraweb:8000
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      # Router unique (HTTPS) – utilise une variable d'env claire
      # Dans .env : TRATRA_HOST=tratra.net
      - traefik.http.routers.tratraweb.rule=Host(`${tratraweb_HOST}`)
      - traefik.http.routers.tratraweb.entrypoints=websecure
      - traefik.http.routers.tratraweb.tls.certresolver=lets

      # Middlewares
      - traefik.http.routers.tratraweb.middlewares=tratraweb-sec-headers@docker,tratraweb-compress@docker,tratraweb-rl@docker

      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsSeconds=31536000
      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsPreload=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.frameDeny=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.referrerPolicy=strict-origin-when-cross-origin
      - traefik.http.middlewares.tratraweb-compress.compress=true
      - traefik.http.middlewares.tratraweb-rl.ratelimit.average=150
      - traefik.http.middlewares.tratraweb-rl.ratelimit.burst=250

      # Service explicite (port d'écoute interne)
      - traefik.http.services.tratraweb-svc.loadbalancer.server.port=8000
      - traefik.http.routers.tratraweb.service=tratraweb-svc

    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - web     # parle à db/redis
      - proxy   # exposé à Traefik
    restart: unless-stopped

  # --- Celery Worker ---
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A tratra worker -l info --prefetch-multiplier=1 --max-tasks-per-child=200 --queues=default,notifications
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [web]
    restart: unless-stopped

  # --- Celery Beat (planificateur) ---
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A tratra beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [web]
    restart: unless-stopped

  adminer:
    image: adminer:4
    environment:
      # Connexion par défaut à tratradb (service DB dans le même réseau 'web')
      ADMINER_DEFAULT_SERVER: tratradb
      # Thème optionnel :
      # ADMINER_DESIGN: pepa-linha
    # ports:
    #   - "8080:8080"   # facultatif si exposé par Traefik
    networks:
      - web
      - proxy
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      - traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST}`)
      - traefik.http.routers.adminer.entrypoints=websecure
      - traefik.http.routers.adminer.tls.certresolver=lets
      - traefik.http.services.adminer-svc.loadbalancer.server.port=8080

      # Compression + (optionnel) BasicAuth
      - traefik.http.routers.adminer.middlewares=adminer-compress@docker${ADMINER_AUTH_SUFFIX}
      - traefik.http.middlewares.adminer-compress.compress=true

      # Active la basic auth si tu définis BASIC_AUTH_USERS (format htpasswd)
      # ADMINER_AUTH_SUFFIX peut valoir ",adminer-auth@docker" (cf .env)
      - traefik.http.middlewares.adminer-auth.basicauth.users=${BASIC_AUTH_USERS}
