#/Users/ogahserge/Documents/tratra/docker-compose.yml
# docker-compose.yml (stack de l’app tratra — sans Traefik)
# Traefik tourne dans un autre compose et expose 80/443
# Assure-toi que le réseau externe "proxy" existe:  docker network ls | grep proxy || docker network create proxy

networks:
  web:          # réseau interne de l’app
    driver: bridge
  proxy:        # réseau partagé avec Traefik (externe)
    external: true

volumes:
  postgres_data:
  static_volume:
  media_volume:

services:
  # --- Base de données Postgres + PostGIS ---
  tratradb:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [web]
    restart: unless-stopped

  # --- Redis (broker Celery + cache + Channels) ---
  redis:
    image: redis:7
    command: ["redis-server","--save","","--appendonly","no"]
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [web]
    restart: unless-stopped

  # --- tratraweb Django/ASGI (Daphne) ---
  tratraweb:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    # Entrypoint qui fait: check DB/Redis, migrate, collectstatic… puis Daphne
    command: ["/app/docker/entrypoint.sh", "daphne", "-b", "0.0.0.0", "-p", "8000", "tratra.asgi:application"]
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Labels Traefik: route HTTPS -> service tratraweb:8000
    labels:
      - traefik.enable=true
      # Traefik doit utiliser le réseau "proxy"
      - traefik.docker.network=proxy
      -
      # Router provisoire en clair sur 1934
      - traefik.http.routers.tratraweb-1934.rule=Host(`${tratraweb_HOST}`)
      - traefik.http.routers.tratraweb-1934.entrypoints=debug1934

      # Router unique pour l’app
#      - traefik.http.routers.tratraweb-app.rule=Host(`${tratraweb_HOST}`)
#      - traefik.http.routers.tratraweb-app.entrypoints=websecure
#      - traefik.http.routers.tratraweb-app.tls.certresolver=lets
      # Chaîne de middlewares (renommée pour éviter toute collision de noms globaux)
#      - traefik.http.routers.tratraweb-app.middlewares=tratraweb-sec-headers@docker,tratraweb-compress@docker,tratraweb-rl@docker

      # Service séparé (nom explicite)
      - traefik.http.services.tratraweb-svc.loadbalancer.server.port=8000

      # Middlewares (noms préfixés "tratraweb-")
      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsSeconds=31536000
      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.stsPreload=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.frameDeny=true
      - traefik.http.middlewares.tratraweb-sec-headers.headers.referrerPolicy=no-referrer
      - traefik.http.middlewares.tratraweb-compress.compress=true
      - traefik.http.middlewares.tratraweb-rl.ratelimit.average=150
      - traefik.http.middlewares.tratraweb-rl.ratelimit.burst=250

    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - web     # parle à db/redis
      - proxy   # exposé à Traefik
    restart: unless-stopped

  # --- Celery Worker ---
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A tratra worker -l info --prefetch-multiplier=1 --max-tasks-per-child=200 --queues=default,notifications
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [web]
    restart: unless-stopped

  # --- Celery Beat (planificateur) ---
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: celery -A tratra beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      tratradb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [web]
    restart: unless-stopped
  # --- (Optionnel) Flower monitoring ---
  # flower:
  #   image: mher/flower
  #   command: flower --broker=${REDIS_URL}
  #   environment:
  #     FLOWER_BASIC_AUTH: ${FLOWER_AUTH}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.flower.rule=Host(`${FLOWER_HOST}`)
  #     - traefik.http.routers.flower.entrypoints=websecure
  #     - traefik.http.routers.flower.tls.certresolver=lets
  #     - traefik.http.services.flower.loadbalancer.server.port=5555
  #   networks: [web]
  #   restart: unless-stopped

#services:
#  tratraDB:
#    image: postgres:15
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: tratra
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    ports:
#      - "5432:5432"
#
#  redis:
#    image: redis:7
#    ports:
#      - "6379:6379"
#
#  tratraweb:
#    build: .
#    command: >
#      sh -c "python manage.py migrate &&
#             python manage.py runserver 0.0.0.0:8000"
#    volumes:
#      - .:/app
#    ports:
#      - "8000:8000"
#    depends_on:
#      - tratraDB
#      - redis
#
#  celery:
#    build: .
#    command: celery -A tratra worker -l info
#    volumes:
#      - .:/app
#    depends_on:
#      - db
#      - redis
#
#  celery-beat:
#    build: .
#    command: celery -A tratra beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
#    volumes:
#      - .:/app
#    depends_on:
#      - tratraDB
#      - redis
#
#  flower:
#    image: mher/flower
#    command: flower --broker=redis://redis:6379/0
#    ports:
#      - "5555:5555"
#    depends_on:
#      - redis
#
#volumes:
#  postgres_data: