# settings/base.py
"""
Django settings for tratra project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

import channels
import environ
from decouple import config

from tratra.settings import env

# env = environ.Env()
# environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
SECRET_KEY = config('SECRET_KEY')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-98yp&99d&^j57y15a7!*3h4+t#d2z0r@+e!@dy=e*_b(9m!47i'

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = [
    "afriqconsulting.site",
    "www.afriqconsulting.site",
    "127.0.0.1",
    "localhost",
    "tratraweb",      # nom de service docker (utile pour tests internes)
]

# Pendant l’accès provisoire en HTTP sur :1934, ne force pas HTTPS
SECURE_SSL_REDIRECT = False
# pour le retour en HTTPS strict
# USE_X_FORWARDED_HOST = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# CSRF (pas strictement nécessaire pour /admin en même origine, mais utile si tu postes depuis un front)
CSRF_TRUSTED_ORIGINS = [
    "http://afriqconsulting.site",
    "https://afriqconsulting.site",
    "http://afriqconsulting.site:1934",
    "https://media.afriqconsulting.site",
    "http://media.afriqconsulting.site",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',

    'handy',
    # Libs
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 'allauth.socialaccount.providers.linkedin',
    'allauth.socialaccount.providers.linkedin_oauth2',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',

    'axes',
    'django_celery_beat',
    'storages',
    'django_cleanup',
    'simple_history',
    'actstream',
    'channels',
    'push_notifications',
    'djstripe',
    'django_filters',
    'rest_framework',
    'tailwind',
    'theme',
    'django_browser_reload',

    'grappelli',
    'import_export',
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'django.contrib.humanize',

]
INSTALLED_APPS += ["corsheaders"]

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React dev
# ]
CORS_ALLOW_ALL_ORIGINS = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    "django_browser_reload.middleware.BrowserReloadMiddleware",

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'axes.middleware.AxesMiddleware',
    'handy.middleware.IPBlacklistMiddleware',

]

ROOT_URLCONF = 'tratra.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tratra.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

AUTHENTICATION_BACKENDS = (
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# ACCOUNT_EMAIL_REQUIRED = True
LOGIN_REDIRECT_URL = 'handydash'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
# ACCOUNT_USERNAME_REQUIRED = False  # Ne pas exiger le champ username
# ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Auth via email uniquement
ACCOUNT_LOGIN_METHODS = {"email"}  # ou {"email","username"} selon ton besoin
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_UNIQUE_EMAIL = True  # Empêche les doublons

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

USE_I18N = True
TIME_ZONE = 'Africa/Abidjan'
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# --- Static (servi par WhiteNoise) ---
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STORAGES = {
    # MEDIA (uploads) → MinIO via django-storages (S3Boto3)
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    # STATIC collecté → WhiteNoise (compressé + manifest)
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Perfs/Debug WhiteNoise
DEBUG = os.getenv("DEBUG", "False").lower() in ("1", "true", "yes")
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_MAX_AGE = 60 * 60 * 24 * 365

# --- MinIO (API S3 compatible) pour MEDIA ---
# NOTE: pas besoin d'AWS ; on garde ces noms car django-storages/boto3 les utilisent.
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
AWS_S3_ENDPOINT_URL = config("AWS_S3_ENDPOINT_URL", default="http://minio:9000")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="us-east-1")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", default="tratra-media")

# MinIO : addressing style et signature
AWS_S3_ADDRESSING_STYLE = "path"
AWS_S3_SIGNATURE_VERSION = "s3v4"

# Fichiers médias publics (URLs simples) — mets à True si tu veux des URLs signées temporaires
AWS_QUERYSTRING_AUTH = False
AWS_DEFAULT_ACL = None  # requis par django-storages >= 1.13

# (optionnel) domaine public/Traefik pour servir les médias (ex: media.afriqconsulting.site)
AWS_S3_CUSTOM_DOMAIN = config("AWS_S3_CUSTOM_DOMAIN", default="") or None

# MEDIA_URL construit selon le domaine choisi
if AWS_S3_CUSTOM_DOMAIN:
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"
else:
    # URL directe MinIO (évite d'exposer 9000 en public ; préfère un router Traefik)
    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'handy.User'  # Remplacez 'handy' par le nom de votre app

# === CHANNELS ===
ASGI_APPLICATION = 'tratra.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(config('REDIS_HOST', default='redis'), 6379)],
        },
    },
}

TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = ['127.0.0.1']
# === CELERY ===
CELERY_BROKER_URL = config('REDIS_URL', default='redis://redis:6379/0')
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_BEAT_SCHEDULE = {}

# === STATIC & MEDIA ===

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')

# === CORS ===
# CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])

# === DJSTRIPE ===
DJSTRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET')
DJSTRIPE_FOREIGN_KEY_TO_FIELD = 'id'

# === SENTRY ===
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

channels.__version__ = "4.0.0"

sentry_sdk.init(
    dsn=config('SENTRY_DSN', default=''),
    integrations=[DjangoIntegration()],
    traces_sample_rate=1.0,
    send_default_pii=True
)

# === EMAIL ===
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = config('EMAIL_HOST')
# EMAIL_PORT = config('EMAIL_PORT')
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = config('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_BACKEND = config("EMAIL_BACKEND")
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = int(config("EMAIL_PORT"))
EMAIL_USE_TLS = config("EMAIL_USE_TLS")
# EMAIL_USE_SSL = config("EMAIL_USE_SSL")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")

# === AXES ===
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 1  # heure
AXES_LOCK_OUT_AT_FAILURE = True
AXES_ENABLE_ADMIN = True
AXES_VERBOSE = True
AXES_LOCKOUT_TEMPLATE = '403.html'  # Utilise un template custom si bloqué
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
# === OTHER ===
ACCOUNT_FORMS = {
    'signup': 'handy.forms.CustomSignupForm',
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {  # 👈 ça c'est important
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

